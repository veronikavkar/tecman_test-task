{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-006ba990\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"custom-checkbox\"\n};\nconst _hoisted_2 = [\"checked\"];\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"checkmark\"\n}, null, -1 /* HOISTED */));\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"label\", _hoisted_1, [_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    checked: $props.modelValue,\n    onChange: _cache[0] || (_cache[0] = (...args) => $options.handleChange && $options.handleChange(...args)),\n    ref: \"checkbox\"\n  }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_2), _hoisted_3]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","_hoisted_1","type","checked","$props","modelValue","onChange","_cache","args","$options","handleChange","ref","_hoisted_2","_hoisted_3"],"sources":["C:\\Users\\petro\\OneDrive\\Desktop\\tecman\\tecman_test-task\\src\\components\\common\\CustomCheckbox.vue"],"sourcesContent":["<template>\r\n  <label class=\"custom-checkbox\">\r\n    <input\r\n      type=\"checkbox\"\r\n      :checked=\"modelValue\"\r\n      @change=\"handleChange\"\r\n      ref=\"checkbox\"\r\n    />\r\n    <span class=\"checkmark\"></span>\r\n  </label>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"CustomCheckbox\",\r\n  props: {\r\n    modelValue: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    indeterminate: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n  },\r\n  mounted() {\r\n    this.updateIndeterminateState();\r\n  },\r\n  watch: {\r\n    indeterminate(val) {\r\n      this.updateIndeterminateState();\r\n    },\r\n  },\r\n  methods: {\r\n    updateIndeterminateState() {\r\n      this.$refs.checkbox.indeterminate = this.indeterminate;\r\n    },\r\n    handleChange(event) {\r\n      this.$emit(\"update:modelValue\", event.target.checked);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.custom-checkbox input[type=\"checkbox\"] {\r\n  position: absolute;\r\n  opacity: 0;\r\n  cursor: pointer;\r\n}\r\n\r\n.custom-checkbox {\r\n  display: inline-block;\r\n  position: relative;\r\n  cursor: pointer;\r\n}\r\n\r\n.custom-checkbox .checkmark {\r\n  position: absolute;\r\n  top: -16px;\r\n  left: 0;\r\n  height: 18px;\r\n  width: 18px;\r\n  background-color: #ffffff;\r\n  border: 2px solid #888888;\r\n  border-radius: 4px;\r\n  transition: background-color 0.3s, border-color 0.3s;\r\n}\r\n\r\n.custom-checkbox input[type=\"checkbox\"]:checked + .checkmark {\r\n  background-color: #a53863;\r\n  border-color: #a53863;\r\n}\r\n\r\n.custom-checkbox .checkmark:after {\r\n  content: \"\";\r\n  position: absolute;\r\n  display: none;\r\n  left: 5px;\r\n  top: 1px;\r\n  width: 6px;\r\n  height: 10px;\r\n  border: solid white;\r\n  border-width: 0 2px 2px 0;\r\n  transform: rotate(45deg);\r\n}\r\n\r\n.custom-checkbox input[type=\"checkbox\"]:checked + .checkmark:after {\r\n  display: block;\r\n}\r\n/* Стиль для состояния indeterminate (минус) */\r\n.custom-checkbox input[type=\"checkbox\"]:indeterminate + .checkmark {\r\n  background-color: #a53863;\r\n  border-color: #a53863;\r\n}\r\n\r\n.custom-checkbox input[type=\"checkbox\"]:indeterminate + .checkmark:before {\r\n  content: \"\";\r\n  position: absolute;\r\n  width: 10px;\r\n  height: 2px;\r\n  background-color: white;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  display: block;\r\n}\r\n.custom-checkbox input[type=\"checkbox\"]:indeterminate + .checkmark:after {\r\n  display: none;\r\n}\r\n\r\n@media screen and (max-width: 590px) {\r\n  .custom-checkbox .checkmark {\r\n    height: 14px;\r\n    width: 14px;\r\n  }\r\n}\r\n@media screen and (max-width: 480px) {\r\n  .custom-checkbox .checkmark:after {\r\n    left: 4px;\r\n    top: 1px;\r\n    width: 4px;\r\n    height: 7px;\r\n  }\r\n  .custom-checkbox .checkmark {\r\n    height: 12px;\r\n    width: 12px;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":";;;EACSA,KAAK,EAAC;AAAiB;mBADhC;gEAQIC,mBAAA,CAA+B;EAAzBD,KAAK,EAAC;AAAW;;uBAPzBE,mBAAA,CAQQ,SARRC,UAQQ,GAPNF,mBAAA,CAKE;IAJAG,IAAI,EAAC,UAAU;IACdC,OAAO,EAAEC,MAAA,CAAAC,UAAU;IACnBC,QAAM,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,YAAA,IAAAD,QAAA,CAAAC,YAAA,IAAAF,IAAA,CAAY;IACrBG,GAAG,EAAC;2CANVC,UAAA,GAQIC,UAA+B,C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}